<section class="coming-soon">
  <div class="text-container"></div>
</section>

<style is:global>
  .coming-soon {
    block-size: 100svh;
    display: flex;
    justify-content: center;
    align-items: center;
    animation: matrix 1400ms infinite normal;
    color: var(--text-light);
    font-size: 3rem;

    font-family: Glancyr;
  }

  .highlighted {
    color: var(--text-primary);
  }

  @keyframes matrix {
    0% {
      opacity: 0;
      translate: 0 0;
    }
    45% {
      opacity: 1;
    }
    70% {
      opacity: 1;
    }
  }
</style>

<script>
  class TextScramble {
    constructor(el: HTMLElement) {
      this.el = el;
      this.chars = "!<>-_\\/[]{}—=+*^?#________";
      this.update = this.update.bind(this);
    }
    setText(newText) {
      const oldText = this.el.innerText;
      const length = Math.max(oldText.length, newText.length);
      const promise = new Promise((resolve) => (this.resolve = resolve));
      this.queue = [];
      for (let i = 0; i < length; i++) {
        const from = oldText[i] || "";
        const to = newText[i] || "";
        const start = Math.floor(Math.random() * 40);
        const end = start + Math.floor(Math.random() * 40);
        this.queue.push({ from, to, start, end });
      }
      cancelAnimationFrame(this.frameRequest);
      this.frame = 0;
      this.update();
      return promise;
    }
    update() {
      let output = "";
      let complete = 0;
      for (let i = 0, n = this.queue.length; i < n; i++) {
        let { from, to, start, end, char } = this.queue[i];
        if (this.frame >= end) {
          complete++;
          output += to;
        } else if (this.frame >= start) {
          if (!char || Math.random() < 0.28) {
            char = this.randomChar();
            this.queue[i].char = char;
          }
          output += `<span class="highlighted">${char}</span>`;
        } else {
          output += from;
        }
      }

      this.el.innerHTML = output;
      if (complete === this.queue.length) {
        this.resolve();
      } else {
        this.frameRequest = requestAnimationFrame(this.update);
        this.frame++;
      }
    }
    randomChar() {
      return this.chars[Math.floor(Math.random() * this.chars.length)];
    }
  }

  // ——————————————————————————————————————————————————
  // Example
  // ——————————————————————————————————————————————————

  const phrases = [
    "Site in progress...",
    "Coming soon",
    "Check out my socials below",
    "and feel free to reach out!",
  ];

  const el = document.querySelector(".coming-soon") as HTMLElement;
  const fx = new TextScramble(el);

  let counter = 0;
  const next = () => {
    fx.setText(phrases[counter]).then(() => {
      setTimeout(next, 1600);
    });
    counter = (counter + 1) % phrases.length;
  };

  next();
  //   type Queue = {
  //     from: string;
  //     to: string;
  //     start: number;
  //     end: number;
  //     char?: string;
  //   };

  //   const CHARS = "!<>-_\\/[]{}—=+*^?#_____";
  //   const CHARS_LENGTH = CHARS.length;
  //   const PHRASES = [
  //     "Site in progress...",
  //     "Coming soon",
  //     "Check out my socials below",
  //     "and feel free to reach out!",
  //   ];

  //   const queue: Queue[] = [];
  //   const el = document.querySelector(".coming-soon") as HTMLElement;

  //   let resolve: (value?: unknown) => void;
  //   let frameRequest: number;
  //   let frame = 0;

  //   const scrambleText = () => {
  //     const updateText = () => {
  //       let output = "";
  //       let complete = 0;
  //       for (let i = 0, n = queue.length; i < n; i++) {
  //         let { from, to, start, end, char } = queue[i]!;
  //         if (frame >= end) {
  //           complete++;
  //           output += to;
  //         } else if (frame >= start) {
  //           if (!char || Math.random() < 0.28) {
  //             char = CHARS[Math.floor(Math.random() * CHARS_LENGTH)] ?? "";
  //             queue[i]!.char = char;
  //           }
  //           output += `<span class="highlighted">${char}</span>`;
  //         } else {
  //           output += from;
  //         }
  //       }

  //       el.innerHTML = output;
  //       if (complete === queue.length) {
  //         resolve();
  //       } else {
  //         frameRequest = requestAnimationFrame(updateText);
  //         frame++;
  //       }
  //     };

  //     return (newText: string) => {
  //       const prevText = el.innerText;
  //       const max = Math.max(prevText.length, newText.length);

  //       for (let i = 0; i < max; i++) {
  //         const from = prevText[i] ?? "";
  //         const to = newText[i] ?? "";
  //         const start = Math.floor(Math.random() * 40);
  //         const end = start + Math.floor(Math.random() * 40);
  //         queue.push({ from, to, start, end });
  //       }
  //       cancelAnimationFrame(frameRequest);
  //       frame = 0;

  //       updateText();
  //       return new Promise((res) => (resolve = res));
  //     };
  //   };

  //   const setText = scrambleText();
  //   let idx = 0;

  //   const update = () => {
  //     const text = PHRASES[idx]!;
  //     setText(text).then(() => {
  //       setTimeout(update, 800);
  //     });
  //     idx = (idx + 1) % PHRASES.length;
  //   };

  //   update();
</script>
