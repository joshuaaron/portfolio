---
import SocialBar from "./SocialBar.astro";
---

<section class="coming-soon">
    <div class="text-container"></div>
    <SocialBar />
</section>

<style is:global>
    .coming-soon {
        block-size: 100%;
        padding-top: 20vh;
        display: grid;
        grid-template-rows: 1fr auto;
        justify-content: end;
        color: var(--color-text);

        font-size: var(--font-size-adaptive);
        font-family: var(--font-heading);
    }

    .text-container {
        animation: matrix 1400ms infinite normal;
        justify-self: end;
    }

    .highlighted {
        color: var(--color-primary);
    }

    @keyframes matrix {
        0% {
            opacity: 0;
            translate: 0 0;
        }
        45% {
            opacity: 1;
        }
        55% {
            opacity: 0.8;
            translate: -2px 0;
        }
        65% {
            translate: 0 0;
        }
        70% {
            opacity: 1;
        }
    }
</style>

<script>
    function randomizeString(node: HTMLElement) {
        const el = node;
        const chars = "!<>-_\\/[]{}â€”=+*^?#________";
        const queue: any[] = [];

        let frame = 0;
        let frameRequest = 0;

        const setText = (newText: string, callback: (...args: unknown[]) => void) => {
            const oldText = el.innerText;
            const length = Math.max(oldText.length, newText.length);

            for (let i = 0; i < length; i++) {
                const from = oldText[i] || "";
                const to = newText[i] || "";
                const start = Math.floor(Math.random() * 40);
                const end = start + Math.floor(Math.random() * 40);
                queue.push({ from, to, start, end });
            }
            cancelAnimationFrame(frameRequest);
            frame = 0;
            update(callback);
        };
        const update = (cb: (...args: unknown[]) => void) => {
            let output = "";
            let complete = 0;
            for (let i = 0, n = queue.length; i < n; i++) {
                let { from, to, start, end, char } = queue[i];
                if (frame >= end) {
                    complete++;
                    output += to;
                } else if (frame >= start) {
                    if (!char || Math.random() < 0.28) {
                        char = randomChar();
                        queue[i].char = char;
                    }
                    output += `<span class="highlighted">${char}</span>`;
                } else {
                    output += from;
                }
            }

            el.innerHTML = output;
            if (complete === queue.length) {
                queue.length = 0;
                cb();
            } else {
                frameRequest = requestAnimationFrame(() => update(cb));
                frame++;
            }
        };
        const randomChar = () => chars[Math.floor(Math.random() * chars.length)];

        return { setText };
    }

    const phrases = ["Site in progress...", "Coming soon", "Check out my socials below", "and feel free to reach out!"];

    const el = document.querySelector(".text-container") as HTMLElement;
    const { setText } = randomizeString(el);
    let counter = 0;

    const init = () => {
        setText(phrases[counter] as string, () => {
            setTimeout(init, 1600);
        });
        counter = (counter + 1) % phrases.length;
    };

    init();
</script>
